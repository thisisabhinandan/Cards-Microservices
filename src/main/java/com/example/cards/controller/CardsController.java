package com.example.cards.controller;import com.example.cards.constants.CardsConstants;import com.example.cards.dto.CardsDTO;import com.example.cards.dto.ResponseDTO;import com.example.cards.service.ICardsService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping(path = "/api", produces = {MediaType.APPLICATION_JSON_VALUE})public class CardsController {    @Autowired    private ICardsService iCardsService;    @PostMapping("/create")    public ResponseEntity<ResponseDTO> createCard(@RequestParam String mobileNumber)    {        iCardsService.createCard(mobileNumber);        return ResponseEntity.status(HttpStatus.CREATED).body(new ResponseDTO(CardsConstants.STATUS_201,CardsConstants.MESSAGE_201));    }    @GetMapping("/fetch")    public ResponseEntity<CardsDTO> fetchCardDetails(@RequestParam String mobileNumber)    {       CardsDTO cardsDTO=iCardsService.fetchCard(mobileNumber);       return ResponseEntity.status(HttpStatus.OK).body(cardsDTO);    }    @PutMapping("/update")    public ResponseEntity<ResponseDTO> updateCardDetails(@RequestBody CardsDTO cardsDTO)    {        boolean isUpdated=iCardsService.updateCard(cardsDTO);        if(!isUpdated)        {            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(new ResponseDTO(CardsConstants.STATUS_417,CardsConstants.MESSAGE_417_UPDATE));        }        else{            return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(CardsConstants.STATUS_200,CardsConstants.MESSAGE_200));        }    }    @DeleteMapping("/delete")    public ResponseEntity<ResponseDTO> deleteCardDetails(String mobileNumber)    {        boolean isDeleted=iCardsService.deleteCard(mobileNumber);        if(isDeleted)        {            return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(CardsConstants.STATUS_200,CardsConstants.MESSAGE_200));        }        else {            return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(CardsConstants.STATUS_417,CardsConstants.MESSAGE_417_DELETE));        }    }}